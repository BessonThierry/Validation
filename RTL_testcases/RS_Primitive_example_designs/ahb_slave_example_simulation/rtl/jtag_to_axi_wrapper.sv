// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : jtag_to_axi_wrapper.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2023-12-14 16:24:40
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module jtag_to_axi_wrapper #(
	parameter IP_TYPE 		= "JTAG2AXI",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h2ec4628
)
(    input  wire          ACLK,
    input  wire          ARESET,
    output wire          m_axi_awvalid,
    input  wire          m_axi_awready,
    output wire   [31:0] m_axi_awaddr,
    output wire    [1:0] m_axi_awburst,
    output wire    [7:0] m_axi_awlen,
    output wire    [2:0] m_axi_awsize,
    output wire          m_axi_awlock,
    output wire    [2:0] m_axi_awprot,
    output wire    [3:0] m_axi_awcache,
    output wire    [3:0] m_axi_awqos,
    output wire    [3:0] m_axi_awregion,
    output wire    [3:0] m_axi_awid,
    output wire          m_axi_awuser,
    output wire          m_axi_wvalid,
    input  wire          m_axi_wready,
    output wire          m_axi_wlast,
    output wire   [31:0] m_axi_wdata,
    output wire    [3:0] m_axi_wstrb,
    output wire          m_axi_wuser,
    input  wire          m_axi_bvalid,
    output wire          m_axi_bready,
    input  wire    [1:0] m_axi_bresp,
    input  wire    [3:0] m_axi_bid,
    input  wire          m_axi_buser,
    output wire          m_axi_arvalid,
    input  wire          m_axi_arready,
    output wire   [31:0] m_axi_araddr,
    output wire    [1:0] m_axi_arburst,
    output wire    [7:0] m_axi_arlen,
    output wire    [2:0] m_axi_arsize,
    output wire          m_axi_arlock,
    output wire    [2:0] m_axi_arprot,
    output wire    [3:0] m_axi_arcache,
    output wire    [3:0] m_axi_arqos,
    output wire    [3:0] m_axi_arregion,
    output wire    [3:0] m_axi_arid,
    output wire          m_axi_aruser,
    input  wire          m_axi_rvalid,
    output wire          m_axi_rready,
    input  wire          m_axi_rlast,
    input  wire    [1:0] m_axi_rresp,
    input  wire   [31:0] m_axi_rdata,
    input  wire    [3:0] m_axi_rid,
    input  wire          m_axi_ruser,
    input  wire          JTAG_TCK,
    input  wire          JTAG_TMS,
    input  wire          JTAG_TDI,
    output wire          JTAG_TDO,
    input  wire          JTAG_TRST
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          aw_valid;
wire          aw_ready;
wire   [31:0] aw_payload_addr;
wire    [1:0] aw_payload_burst;
wire    [7:0] aw_payload_len;
wire    [2:0] aw_payload_size;
wire          aw_payload_lock;
wire    [2:0] aw_payload_prot;
wire    [3:0] aw_payload_cache;
wire    [3:0] aw_payload_qos;
wire    [3:0] aw_payload_region;
wire    [3:0] aw_param_id;
wire          aw_param_user;
wire          w_valid;
wire          w_ready;
wire          w_last;
wire   [31:0] w_payload_data;
wire    [3:0] w_payload_strb;
wire          w_param_user;
wire          b_valid;
wire          b_ready;
wire    [1:0] b_payload_resp;
wire    [3:0] b_param_id;
wire          b_param_user;
wire          ar_valid;
wire          ar_ready;
wire   [31:0] ar_payload_addr;
wire    [1:0] ar_payload_burst;
wire    [7:0] ar_payload_len;
wire    [2:0] ar_payload_size;
wire          ar_payload_lock;
wire    [2:0] ar_payload_prot;
wire    [3:0] ar_payload_cache;
wire    [3:0] ar_payload_qos;
wire    [3:0] ar_payload_region;
wire    [3:0] ar_param_id;
wire          ar_param_user;
wire          r_valid;
wire          r_ready;
wire          r_last;
wire    [1:0] r_payload_resp;
wire   [31:0] r_payload_data;
wire    [3:0] r_param_id;
wire          r_param_user;
wire          JTAG_TCK_1;
wire          JTAG_TMS_1;
wire          JTAG_TDI_1;
wire          JTAG_TDO_1;
wire          JTAG_TRST_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = ACLK;
assign sys_rst = ARESET;
assign m_axi_awvalid = aw_valid;
assign m_axi_awaddr = aw_payload_addr;
assign m_axi_awburst = aw_payload_burst;
assign m_axi_awlen = aw_payload_len;
assign m_axi_awsize = aw_payload_size;
assign m_axi_awlock = aw_payload_lock;
assign m_axi_awprot = aw_payload_prot;
assign m_axi_awcache = aw_payload_cache;
assign m_axi_awqos = aw_payload_qos;
assign m_axi_awregion = aw_payload_region;
assign m_axi_awid = aw_param_id;
assign m_axi_awuser = aw_param_user;
assign aw_ready = m_axi_awready;
assign m_axi_wvalid = w_valid;
assign m_axi_wdata = w_payload_data;
assign m_axi_wstrb = w_payload_strb;
assign m_axi_wuser = w_param_user;
assign m_axi_wlast = w_last;
assign w_ready = m_axi_wready;
assign b_valid = m_axi_bvalid;
assign b_payload_resp = m_axi_bresp;
assign b_param_id = m_axi_bid;
assign b_param_user = m_axi_buser;
assign m_axi_bready = b_ready;
assign m_axi_arvalid = ar_valid;
assign m_axi_araddr = ar_payload_addr;
assign m_axi_arburst = ar_payload_burst;
assign m_axi_arlen = ar_payload_len;
assign m_axi_arsize = ar_payload_size;
assign m_axi_arlock = ar_payload_lock;
assign m_axi_arprot = ar_payload_prot;
assign m_axi_arcache = ar_payload_cache;
assign m_axi_arqos = ar_payload_qos;
assign m_axi_arregion = ar_payload_region;
assign m_axi_arid = ar_param_id;
assign m_axi_aruser = ar_param_user;
assign ar_ready = m_axi_arready;
assign r_valid = m_axi_rvalid;
assign r_payload_resp = m_axi_rresp;
assign r_payload_data = m_axi_rdata;
assign r_param_id = m_axi_rid;
assign r_param_user = m_axi_ruser;
assign r_last = m_axi_rlast;
assign m_axi_rready = r_ready;
assign JTAG_TCK_1 = JTAG_TCK;
assign JTAG_TMS_1 = JTAG_TMS;
assign JTAG_TDI_1 = JTAG_TDI;
assign JTAG_TDO = JTAG_TDO_1;
assign JTAG_TRST_1 = JTAG_TRST;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

jtag_to_axi_top #(
	.C_S_AXI_ADDR_WIDTH(32),
	.C_S_AXI_ARUSER_WIDTH(1),
	.C_S_AXI_AWUSER_WIDTH(1),
	.C_S_AXI_BUSER_WIDTH(1),
	.C_S_AXI_DATA_WIDTH(32),
	.C_S_AXI_ID_WIDTH(4),
	.C_S_AXI_RUSER_WIDTH(1),
	.C_S_AXI_WUSER_WIDTH(1),
	.IP_ID(IP_ID),
	.IP_TYPE(IP_TYPE),
	.IP_VERSION(IP_VERSION)
) jtag_to_axi_top (
	.ACLK(sys_clk),
	.ARESETN(sys_rst),
	.JTAG_TCK(JTAG_TCK_1),
	.JTAG_TDI(JTAG_TDI_1),
	.JTAG_TMS(JTAG_TMS_1),
	.JTAG_TRST(JTAG_TRST_1),
	.ar_ready(ar_ready),
	.aw_ready(aw_ready),
	.b_id(b_param_id),
	.b_resp(b_payload_resp),
	.b_user(b_param_user),
	.b_valid(b_valid),
	.r_data(r_payload_data),
	.r_id(r_param_id),
	.r_last(r_last),
	.r_resp(r_payload_resp),
	.r_user(r_param_user),
	.r_valid(r_valid),
	.w_ready(w_ready),
	.JTAG_TDO(JTAG_TDO_1),
	.ar_addr(ar_payload_addr),
	.ar_burst(ar_payload_burst),
	.ar_cache(ar_payload_cache),
	.ar_id(ar_param_id),
	.ar_len(ar_payload_len),
	.ar_lock(ar_payload_lock),
	.ar_prot(ar_payload_prot),
	.ar_qos(ar_payload_qos),
	.ar_region(ar_payload_region),
	.ar_size(ar_payload_size),
	.ar_user(ar_param_user),
	.ar_valid(ar_valid),
	.aw_addr(aw_payload_addr),
	.aw_burst(aw_payload_burst),
	.aw_cache(aw_payload_cache),
	.aw_id(aw_param_id),
	.aw_len(aw_payload_len),
	.aw_lock(aw_payload_lock),
	.aw_prot(aw_payload_prot),
	.aw_qos(aw_payload_qos),
	.aw_region(aw_payload_region),
	.aw_size(aw_payload_size),
	.aw_user(aw_param_user),
	.aw_valid(aw_valid),
	.b_ready(b_ready),
	.r_ready(r_ready),
	.w_data(w_payload_data),
	.w_last(w_last),
	.w_strb(w_payload_strb),
	.w_user(w_param_user),
	.w_valid(w_valid)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-12-14 16:24:40.
//------------------------------------------------------------------------------
