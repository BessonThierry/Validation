// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : vexriscv_gpio.v
// Device     : SIM
// LiteX sha1 : a4cc859d
// Date       : 2022-05-31 17:35:51
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module vexriscv_gpio (
	output wire vexriscv_gpio_trace,
	output wire serial_source_valid,
	input  wire serial_source_ready,
	output wire [7:0] serial_source_data,
	input  wire serial_sink_valid,
	output wire serial_sink_ready,
	input  wire [7:0] serial_sink_data,
	input  wire sys_clk,
	input  wire [31:0] gpio_oe,
	output reg  [31:0] gpio_o,
	output reg  [31:0] gpio_i
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
wire reset;
reg  [31:0] interrupt = 32'd0;
wire [29:0] ibus_adr;
wire [31:0] ibus_dat_w;
wire [31:0] ibus_dat_r;
wire [3:0] ibus_sel;
wire ibus_cyc;
wire ibus_stb;
wire ibus_ack;
wire ibus_we;
wire [2:0] ibus_cti;
wire [1:0] ibus_bte;
wire ibus_err;
wire [29:0] dbus_adr;
wire [31:0] dbus_dat_w;
wire [31:0] dbus_dat_r;
wire [3:0] dbus_sel;
wire dbus_cyc;
wire dbus_stb;
wire dbus_ack;
wire dbus_we;
wire [2:0] dbus_cti;
wire [1:0] dbus_bte;
wire dbus_err;
reg  [31:0] vexriscv = 32'd0;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg  ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg  ram_bus_err = 1'd0;
reg  adr_burst = 1'd0;
wire [14:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg  interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg  interface0_ram_bus_err = 1'd0;
reg  sram0_adr_burst = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg  [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg  interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg  interface1_ram_bus_err = 1'd0;
reg  sram1_adr_burst = 1'd0;
wire [13:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg  [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire sink_valid;
wire sink_ready;
wire sink_first;
wire sink_last;
wire [7:0] sink_payload_data;
wire source_valid;
wire source_ready;
reg  source_first = 1'd0;
reg  source_last = 1'd0;
wire [7:0] source_payload_data;
reg  uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg  uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg  uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg  uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg  uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg  uart_tx_clear = 1'd0;
reg  uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg  uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg  uart_rx_clear = 1'd0;
reg  uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg  [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg  uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg  [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg  uart_pending_re = 1'd0;
reg  [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg  [1:0] uart_enable_storage = 2'd0;
reg  uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg  uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg  uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg  uart_tx_fifo_sink_first = 1'd0;
reg  uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg  uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg  [4:0] uart_tx_fifo_level0 = 5'd0;
reg  uart_tx_fifo_replace = 1'd0;
reg  [3:0] uart_tx_fifo_produce = 4'd0;
reg  [3:0] uart_tx_fifo_consume = 4'd0;
reg  [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg  uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg  [4:0] uart_rx_fifo_level0 = 5'd0;
reg  uart_rx_fifo_replace = 1'd0;
reg  [3:0] uart_rx_fifo_produce = 4'd0;
reg  [3:0] uart_rx_fifo_consume = 4'd0;
reg  [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg  [31:0] timer_load_storage = 32'd0;
reg  timer_load_re = 1'd0;
reg  [31:0] timer_reload_storage = 32'd0;
reg  timer_reload_re = 1'd0;
reg  timer_en_storage = 1'd0;
reg  timer_en_re = 1'd0;
reg  timer_update_value_storage = 1'd0;
reg  timer_update_value_re = 1'd0;
reg  [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg  timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg  timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg  timer_zero_clear = 1'd0;
reg  timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg  timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg  timer_pending_re = 1'd0;
reg  timer_pending_r = 1'd0;
wire timer_zero2;
reg  timer_enable_storage = 1'd0;
reg  timer_enable_re = 1'd0;
reg  [31:0] timer_value = 32'd0;
wire sys_clk_1;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;
reg  gpio_axi_aw_valid = 1'd0;
wire gpio_axi_aw_ready;
reg  [31:0] gpio_axi_aw_payload_addr = 32'd0;
reg  gpio_axi_w_valid = 1'd0;
wire gpio_axi_w_ready;
reg  [31:0] gpio_axi_w_payload_data = 32'd0;
reg  [3:0] gpio_axi_w_payload_strb = 4'd0;
wire gpio_axi_b_valid;
reg  gpio_axi_b_ready = 1'd0;
wire [1:0] gpio_axi_b_payload_resp;
reg  gpio_axi_ar_valid = 1'd0;
wire gpio_axi_ar_ready;
reg  [31:0] gpio_axi_ar_payload_addr = 32'd0;
wire gpio_axi_r_valid;
reg  gpio_axi_r_ready = 1'd0;
wire [1:0] gpio_axi_r_payload_resp;
wire [31:0] gpio_axi_r_payload_data;
reg  [31:0] gpio_axi_GPIN = 32'd0;
wire [31:0] gpio_axi_GPOUT;
wire gpio_axi_INT;
reg  gpio_axi0 = 1'd0;
reg  gpio_axi1 = 1'd0;
wire [29:0] bridged_interface_adr;
wire [31:0] bridged_interface_dat_w;
reg  [31:0] bridged_interface_dat_r = 32'd0;
wire [3:0] bridged_interface_sel;
wire bridged_interface_cyc;
wire bridged_interface_stb;
reg  bridged_interface_ack = 1'd0;
wire bridged_interface_we;
wire [2:0] bridged_interface_cti;
wire [1:0] bridged_interface_bte;
reg  bridged_interface_err = 1'd0;
reg  cmd_done = 1'd0;
reg  data_done = 1'd0;
wire [29:0] addr;
reg  [1:0] subfragments_state = 2'd0;
reg  [1:0] subfragments_next_state = 2'd0;
reg  cmd_done_next_value0 = 1'd0;
reg  cmd_done_next_value_ce0 = 1'd0;
reg  data_done_next_value1 = 1'd0;
reg  data_done_next_value_ce1 = 1'd0;
reg  [13:0] vexriscv_gpiosoc_vexriscv_gpiosoc_adr = 14'd0;
reg  vexriscv_gpiosoc_vexriscv_gpiosoc_we = 1'd0;
reg  [31:0] vexriscv_gpiosoc_vexriscv_gpiosoc_dat_w = 32'd0;
wire [31:0] vexriscv_gpiosoc_vexriscv_gpiosoc_dat_r;
wire [29:0] vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_adr;
wire [31:0] vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_w;
reg  [31:0] vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_r = 32'd0;
wire [3:0] vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_sel;
wire vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cyc;
wire vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_stb;
reg  vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_ack = 1'd0;
wire vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_we;
wire [2:0] vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cti;
wire [1:0] vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_bte;
reg  vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_err = 1'd0;
wire [29:0] vexriscv_gpiosoc_shared_adr;
wire [31:0] vexriscv_gpiosoc_shared_dat_w;
reg  [31:0] vexriscv_gpiosoc_shared_dat_r = 32'd0;
wire [3:0] vexriscv_gpiosoc_shared_sel;
wire vexriscv_gpiosoc_shared_cyc;
wire vexriscv_gpiosoc_shared_stb;
reg  vexriscv_gpiosoc_shared_ack = 1'd0;
wire vexriscv_gpiosoc_shared_we;
wire [2:0] vexriscv_gpiosoc_shared_cti;
wire [1:0] vexriscv_gpiosoc_shared_bte;
wire vexriscv_gpiosoc_shared_err;
wire [1:0] vexriscv_gpiosoc_request;
reg  vexriscv_gpiosoc_grant = 1'd0;
reg  [4:0] vexriscv_gpiosoc_slave_sel = 5'd0;
reg  [4:0] vexriscv_gpiosoc_slave_sel_r = 5'd0;
reg  vexriscv_gpiosoc_error = 1'd0;
wire vexriscv_gpiosoc_wait;
wire vexriscv_gpiosoc_done;
reg  [19:0] vexriscv_gpiosoc_count = 20'd1000000;
wire [13:0] vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr;
wire vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_w;
wire vexriscv_gpiosoc_csr_bankarray_csrbank0_sel;
wire [13:0] vexriscv_gpiosoc_csr_bankarray_sram_bus_adr;
wire vexriscv_gpiosoc_csr_bankarray_sram_bus_we;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_sram_bus_dat_w;
reg  [31:0] vexriscv_gpiosoc_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] vexriscv_gpiosoc_csr_bankarray_adr;
wire [7:0] vexriscv_gpiosoc_csr_bankarray_dat_r;
wire vexriscv_gpiosoc_csr_bankarray_sel;
reg  vexriscv_gpiosoc_csr_bankarray_sel_r = 1'd0;
wire [13:0] vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr;
wire vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_re = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_we = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_re = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_we = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_value_re = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank1_value_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_value_we = 1'd0;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_csrbank1_value_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_w;
wire vexriscv_gpiosoc_csr_bankarray_csrbank1_sel;
wire [13:0] vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr;
wire vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
wire [31:0] vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire [1:0] vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_w;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_re = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_r;
reg  vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_we = 1'd0;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_w;
wire vexriscv_gpiosoc_csr_bankarray_csrbank2_sel;
wire [13:0] vexriscv_gpiosoc_csr_interconnect_adr;
wire vexriscv_gpiosoc_csr_interconnect_we;
wire [31:0] vexriscv_gpiosoc_csr_interconnect_dat_w;
wire [31:0] vexriscv_gpiosoc_csr_interconnect_dat_r;
reg  vexriscv_gpiosoc_state = 1'd0;
reg  vexriscv_gpiosoc_next_state = 1'd0;
reg  [29:0] array_muxed0 = 30'd0;
reg  [31:0] array_muxed1 = 32'd0;
reg  [3:0] array_muxed2 = 4'd0;
reg  array_muxed3 = 1'd0;
reg  array_muxed4 = 1'd0;
reg  array_muxed5 = 1'd0;
reg  [2:0] array_muxed6 = 3'd0;
reg  [1:0] array_muxed7 = 2'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign vexriscv_gpio_trace = 1'd1;
assign bus_error = vexriscv_gpiosoc_error;
always @(*) begin
	interrupt <= 32'd0;
	interrupt[1] <= timer_irq;
	interrupt[0] <= uart_irq;
end
assign addr = (bridged_interface_adr - 1'd0);
always @(*) begin
	subfragments_next_state <= 2'd0;
	subfragments_next_state <= subfragments_state;
	case (subfragments_state)
		1'd1: begin
			if ((gpio_axi_b_valid & gpio_axi_b_ready)) begin
				if ((gpio_axi_b_payload_resp == 1'd0)) begin
					subfragments_next_state <= 1'd0;
				end else begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			if ((gpio_axi_r_valid & gpio_axi_r_ready)) begin
				if ((gpio_axi_r_payload_resp == 1'd0)) begin
					subfragments_next_state <= 1'd0;
				end else begin
					subfragments_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			subfragments_next_state <= 1'd0;
		end
		default: begin
			if ((bridged_interface_stb & bridged_interface_cyc)) begin
				if (bridged_interface_we) begin
					subfragments_next_state <= 1'd1;
				end else begin
					subfragments_next_state <= 2'd2;
				end
			end
		end
	endcase
end
always @(*) begin
	cmd_done_next_value_ce0 <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((gpio_axi_aw_valid & gpio_axi_aw_ready)) begin
				cmd_done_next_value_ce0 <= 1'd1;
			end
		end
		2'd2: begin
			if ((gpio_axi_ar_valid & gpio_axi_ar_ready)) begin
				cmd_done_next_value_ce0 <= 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
			cmd_done_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	gpio_axi_ar_valid <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			gpio_axi_ar_valid <= (~cmd_done);
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	gpio_axi_aw_payload_addr <= 32'd0;
	case (subfragments_state)
		1'd1: begin
			gpio_axi_aw_payload_addr[31:2] <= addr;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	gpio_axi_ar_payload_addr <= 32'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			gpio_axi_ar_payload_addr[31:2] <= addr;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	data_done_next_value1 <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((gpio_axi_w_valid & gpio_axi_w_ready)) begin
				data_done_next_value1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			data_done_next_value1 <= 1'd0;
		end
	endcase
end
always @(*) begin
	gpio_axi_w_valid <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			gpio_axi_w_valid <= (~data_done);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	data_done_next_value_ce1 <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((gpio_axi_w_valid & gpio_axi_w_ready)) begin
				data_done_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			data_done_next_value_ce1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	gpio_axi_r_ready <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			gpio_axi_r_ready <= cmd_done;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	gpio_axi_w_payload_data <= 32'd0;
	case (subfragments_state)
		1'd1: begin
			gpio_axi_w_payload_data <= bridged_interface_dat_w;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	bridged_interface_dat_r <= 32'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
			if ((gpio_axi_r_valid & gpio_axi_r_ready)) begin
				if ((gpio_axi_r_payload_resp == 1'd0)) begin
					bridged_interface_dat_r <= gpio_axi_r_payload_data;
				end else begin
				end
			end
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	gpio_axi_w_payload_strb <= 4'd0;
	case (subfragments_state)
		1'd1: begin
			gpio_axi_w_payload_strb <= bridged_interface_sel;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	bridged_interface_err <= 1'd0;
	case (subfragments_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			bridged_interface_err <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	gpio_axi_b_ready <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			gpio_axi_b_ready <= (cmd_done & data_done);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	bridged_interface_ack <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((gpio_axi_b_valid & gpio_axi_b_ready)) begin
				if ((gpio_axi_b_payload_resp == 1'd0)) begin
					bridged_interface_ack <= 1'd1;
				end else begin
				end
			end
		end
		2'd2: begin
			if ((gpio_axi_r_valid & gpio_axi_r_ready)) begin
				if ((gpio_axi_r_payload_resp == 1'd0)) begin
					bridged_interface_ack <= 1'd1;
				end else begin
				end
			end
		end
		2'd3: begin
			bridged_interface_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	gpio_axi_aw_valid <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			gpio_axi_aw_valid <= (~cmd_done);
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	cmd_done_next_value0 <= 1'd0;
	case (subfragments_state)
		1'd1: begin
			if ((gpio_axi_aw_valid & gpio_axi_aw_ready)) begin
				cmd_done_next_value0 <= 1'd1;
			end
		end
		2'd2: begin
			if ((gpio_axi_ar_valid & gpio_axi_ar_ready)) begin
				cmd_done_next_value0 <= 1'd1;
			end
		end
		2'd3: begin
		end
		default: begin
			cmd_done_next_value0 <= 1'd0;
		end
	endcase
end
assign bus_errors_status = bus_errors;
assign adr = ram_bus_adr[14:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[13:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
assign serial_source_valid = sink_valid;
assign serial_source_data = sink_payload_data;
assign sink_ready = serial_source_ready;
assign source_valid = serial_sink_valid;
assign source_payload_data = serial_sink_data;
assign serial_sink_ready = source_ready;
assign uart_uart_sink_valid = source_valid;
assign source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = source_first;
assign uart_uart_sink_last = source_last;
assign uart_uart_sink_payload_data = source_payload_data;
assign sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = sink_ready;
assign sink_first = uart_uart_source_first;
assign sink_last = uart_uart_source_last;
assign sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = int_rst;
always @(*) begin
	gpio_i <= 32'd0;
	gpio_i[0] <= gpio_axi_GPIN[0];
	gpio_i[1] <= gpio_axi_GPIN[1];
	gpio_i[2] <= gpio_axi_GPIN[2];
	gpio_i[3] <= gpio_axi_GPIN[3];
	gpio_i[4] <= gpio_axi_GPIN[4];
	gpio_i[5] <= gpio_axi_GPIN[5];
	gpio_i[6] <= gpio_axi_GPIN[6];
	gpio_i[7] <= gpio_axi_GPIN[7];
	gpio_i[8] <= gpio_axi_GPIN[8];
	gpio_i[9] <= gpio_axi_GPIN[9];
	gpio_i[10] <= gpio_axi_GPIN[10];
	gpio_i[11] <= gpio_axi_GPIN[11];
	gpio_i[12] <= gpio_axi_GPIN[12];
	gpio_i[13] <= gpio_axi_GPIN[13];
	gpio_i[14] <= gpio_axi_GPIN[14];
	gpio_i[15] <= gpio_axi_GPIN[15];
	gpio_i[16] <= gpio_axi_GPIN[16];
	gpio_i[17] <= gpio_axi_GPIN[17];
	gpio_i[18] <= gpio_axi_GPIN[18];
	gpio_i[19] <= gpio_axi_GPIN[19];
	gpio_i[20] <= gpio_axi_GPIN[20];
	gpio_i[21] <= gpio_axi_GPIN[21];
	gpio_i[22] <= gpio_axi_GPIN[22];
	gpio_i[23] <= gpio_axi_GPIN[23];
	gpio_i[24] <= gpio_axi_GPIN[24];
	gpio_i[25] <= gpio_axi_GPIN[25];
	gpio_i[26] <= gpio_axi_GPIN[26];
	gpio_i[27] <= gpio_axi_GPIN[27];
	gpio_i[28] <= gpio_axi_GPIN[28];
	gpio_i[29] <= gpio_axi_GPIN[29];
	gpio_i[30] <= gpio_axi_GPIN[30];
	gpio_i[31] <= gpio_axi_GPIN[31];
end
always @(*) begin
	gpio_o <= 32'd0;
	gpio_o[0] <= gpio_axi_GPOUT[0];
	gpio_o[1] <= gpio_axi_GPOUT[1];
	gpio_o[2] <= gpio_axi_GPOUT[2];
	gpio_o[3] <= gpio_axi_GPOUT[3];
	gpio_o[4] <= gpio_axi_GPOUT[4];
	gpio_o[5] <= gpio_axi_GPOUT[5];
	gpio_o[6] <= gpio_axi_GPOUT[6];
	gpio_o[7] <= gpio_axi_GPOUT[7];
	gpio_o[8] <= gpio_axi_GPOUT[8];
	gpio_o[9] <= gpio_axi_GPOUT[9];
	gpio_o[10] <= gpio_axi_GPOUT[10];
	gpio_o[11] <= gpio_axi_GPOUT[11];
	gpio_o[12] <= gpio_axi_GPOUT[12];
	gpio_o[13] <= gpio_axi_GPOUT[13];
	gpio_o[14] <= gpio_axi_GPOUT[14];
	gpio_o[15] <= gpio_axi_GPOUT[15];
	gpio_o[16] <= gpio_axi_GPOUT[16];
	gpio_o[17] <= gpio_axi_GPOUT[17];
	gpio_o[18] <= gpio_axi_GPOUT[18];
	gpio_o[19] <= gpio_axi_GPOUT[19];
	gpio_o[20] <= gpio_axi_GPOUT[20];
	gpio_o[21] <= gpio_axi_GPOUT[21];
	gpio_o[22] <= gpio_axi_GPOUT[22];
	gpio_o[23] <= gpio_axi_GPOUT[23];
	gpio_o[24] <= gpio_axi_GPOUT[24];
	gpio_o[25] <= gpio_axi_GPOUT[25];
	gpio_o[26] <= gpio_axi_GPOUT[26];
	gpio_o[27] <= gpio_axi_GPOUT[27];
	gpio_o[28] <= gpio_axi_GPOUT[28];
	gpio_o[29] <= gpio_axi_GPOUT[29];
	gpio_o[30] <= gpio_axi_GPOUT[30];
	gpio_o[31] <= gpio_axi_GPOUT[31];
end
always @(*) begin
	vexriscv_gpiosoc_next_state <= 1'd0;
	vexriscv_gpiosoc_next_state <= vexriscv_gpiosoc_state;
	case (vexriscv_gpiosoc_state)
		1'd1: begin
			vexriscv_gpiosoc_next_state <= 1'd0;
		end
		default: begin
			if ((vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cyc & vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_stb)) begin
				vexriscv_gpiosoc_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_ack <= 1'd0;
	case (vexriscv_gpiosoc_state)
		1'd1: begin
			vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	vexriscv_gpiosoc_vexriscv_gpiosoc_adr <= 14'd0;
	case (vexriscv_gpiosoc_state)
		1'd1: begin
		end
		default: begin
			if ((vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cyc & vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_stb)) begin
				vexriscv_gpiosoc_vexriscv_gpiosoc_adr <= vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	vexriscv_gpiosoc_vexriscv_gpiosoc_we <= 1'd0;
	case (vexriscv_gpiosoc_state)
		1'd1: begin
		end
		default: begin
			if ((vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cyc & vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_stb)) begin
				vexriscv_gpiosoc_vexriscv_gpiosoc_we <= (vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_we & (vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
always @(*) begin
	vexriscv_gpiosoc_vexriscv_gpiosoc_dat_w <= 32'd0;
	case (vexriscv_gpiosoc_state)
		1'd1: begin
		end
		default: begin
			vexriscv_gpiosoc_vexriscv_gpiosoc_dat_w <= vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_r <= 32'd0;
	case (vexriscv_gpiosoc_state)
		1'd1: begin
			vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_r <= vexriscv_gpiosoc_vexriscv_gpiosoc_dat_r;
		end
		default: begin
		end
	endcase
end
assign vexriscv_gpiosoc_shared_adr = array_muxed0;
assign vexriscv_gpiosoc_shared_dat_w = array_muxed1;
assign vexriscv_gpiosoc_shared_sel = array_muxed2;
assign vexriscv_gpiosoc_shared_cyc = array_muxed3;
assign vexriscv_gpiosoc_shared_stb = array_muxed4;
assign vexriscv_gpiosoc_shared_we = array_muxed5;
assign vexriscv_gpiosoc_shared_cti = array_muxed6;
assign vexriscv_gpiosoc_shared_bte = array_muxed7;
assign ibus_dat_r = vexriscv_gpiosoc_shared_dat_r;
assign dbus_dat_r = vexriscv_gpiosoc_shared_dat_r;
assign ibus_ack = (vexriscv_gpiosoc_shared_ack & (vexriscv_gpiosoc_grant == 1'd0));
assign dbus_ack = (vexriscv_gpiosoc_shared_ack & (vexriscv_gpiosoc_grant == 1'd1));
assign ibus_err = (vexriscv_gpiosoc_shared_err & (vexriscv_gpiosoc_grant == 1'd0));
assign dbus_err = (vexriscv_gpiosoc_shared_err & (vexriscv_gpiosoc_grant == 1'd1));
assign vexriscv_gpiosoc_request = {dbus_cyc, ibus_cyc};
always @(*) begin
	vexriscv_gpiosoc_slave_sel <= 5'd0;
	vexriscv_gpiosoc_slave_sel[0] <= (vexriscv_gpiosoc_shared_adr[29:15] == 1'd0);
	vexriscv_gpiosoc_slave_sel[1] <= (vexriscv_gpiosoc_shared_adr[29:11] == 16'd32768);
	vexriscv_gpiosoc_slave_sel[2] <= (vexriscv_gpiosoc_shared_adr[29:14] == 15'd16384);
	vexriscv_gpiosoc_slave_sel[3] <= (vexriscv_gpiosoc_shared_adr[29:8] == 22'd3932288);
	vexriscv_gpiosoc_slave_sel[4] <= (vexriscv_gpiosoc_shared_adr[29:14] == 16'd61440);
end
assign ram_bus_adr = vexriscv_gpiosoc_shared_adr;
assign ram_bus_dat_w = vexriscv_gpiosoc_shared_dat_w;
assign ram_bus_sel = vexriscv_gpiosoc_shared_sel;
assign ram_bus_stb = vexriscv_gpiosoc_shared_stb;
assign ram_bus_we = vexriscv_gpiosoc_shared_we;
assign ram_bus_cti = vexriscv_gpiosoc_shared_cti;
assign ram_bus_bte = vexriscv_gpiosoc_shared_bte;
assign interface0_ram_bus_adr = vexriscv_gpiosoc_shared_adr;
assign interface0_ram_bus_dat_w = vexriscv_gpiosoc_shared_dat_w;
assign interface0_ram_bus_sel = vexriscv_gpiosoc_shared_sel;
assign interface0_ram_bus_stb = vexriscv_gpiosoc_shared_stb;
assign interface0_ram_bus_we = vexriscv_gpiosoc_shared_we;
assign interface0_ram_bus_cti = vexriscv_gpiosoc_shared_cti;
assign interface0_ram_bus_bte = vexriscv_gpiosoc_shared_bte;
assign interface1_ram_bus_adr = vexriscv_gpiosoc_shared_adr;
assign interface1_ram_bus_dat_w = vexriscv_gpiosoc_shared_dat_w;
assign interface1_ram_bus_sel = vexriscv_gpiosoc_shared_sel;
assign interface1_ram_bus_stb = vexriscv_gpiosoc_shared_stb;
assign interface1_ram_bus_we = vexriscv_gpiosoc_shared_we;
assign interface1_ram_bus_cti = vexriscv_gpiosoc_shared_cti;
assign interface1_ram_bus_bte = vexriscv_gpiosoc_shared_bte;
assign bridged_interface_adr = vexriscv_gpiosoc_shared_adr;
assign bridged_interface_dat_w = vexriscv_gpiosoc_shared_dat_w;
assign bridged_interface_sel = vexriscv_gpiosoc_shared_sel;
assign bridged_interface_stb = vexriscv_gpiosoc_shared_stb;
assign bridged_interface_we = vexriscv_gpiosoc_shared_we;
assign bridged_interface_cti = vexriscv_gpiosoc_shared_cti;
assign bridged_interface_bte = vexriscv_gpiosoc_shared_bte;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_adr = vexriscv_gpiosoc_shared_adr;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_w = vexriscv_gpiosoc_shared_dat_w;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_sel = vexriscv_gpiosoc_shared_sel;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_stb = vexriscv_gpiosoc_shared_stb;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_we = vexriscv_gpiosoc_shared_we;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cti = vexriscv_gpiosoc_shared_cti;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_bte = vexriscv_gpiosoc_shared_bte;
assign ram_bus_cyc = (vexriscv_gpiosoc_shared_cyc & vexriscv_gpiosoc_slave_sel[0]);
assign interface0_ram_bus_cyc = (vexriscv_gpiosoc_shared_cyc & vexriscv_gpiosoc_slave_sel[1]);
assign interface1_ram_bus_cyc = (vexriscv_gpiosoc_shared_cyc & vexriscv_gpiosoc_slave_sel[2]);
assign bridged_interface_cyc = (vexriscv_gpiosoc_shared_cyc & vexriscv_gpiosoc_slave_sel[3]);
assign vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_cyc = (vexriscv_gpiosoc_shared_cyc & vexriscv_gpiosoc_slave_sel[4]);
always @(*) begin
	vexriscv_gpiosoc_shared_ack <= 1'd0;
	vexriscv_gpiosoc_shared_ack <= ((((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | bridged_interface_ack) | vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_ack);
	if (vexriscv_gpiosoc_done) begin
		vexriscv_gpiosoc_shared_ack <= 1'd1;
	end
end
assign vexriscv_gpiosoc_shared_err = ((((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | bridged_interface_err) | vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_err);
always @(*) begin
	vexriscv_gpiosoc_shared_dat_r <= 32'd0;
	vexriscv_gpiosoc_shared_dat_r <= ((((({32{vexriscv_gpiosoc_slave_sel_r[0]}} & ram_bus_dat_r) | ({32{vexriscv_gpiosoc_slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{vexriscv_gpiosoc_slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{vexriscv_gpiosoc_slave_sel_r[3]}} & bridged_interface_dat_r)) | ({32{vexriscv_gpiosoc_slave_sel_r[4]}} & vexriscv_gpiosoc_vexriscv_gpiosoc_wishbone_dat_r));
	if (vexriscv_gpiosoc_done) begin
		vexriscv_gpiosoc_shared_dat_r <= 32'd4294967295;
	end
end
assign vexriscv_gpiosoc_wait = ((vexriscv_gpiosoc_shared_stb & vexriscv_gpiosoc_shared_cyc) & (~vexriscv_gpiosoc_shared_ack));
always @(*) begin
	vexriscv_gpiosoc_error <= 1'd0;
	if (vexriscv_gpiosoc_done) begin
		vexriscv_gpiosoc_error <= 1'd1;
	end
end
assign vexriscv_gpiosoc_done = (vexriscv_gpiosoc_count == 1'd0);
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_sel = (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_r = vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank0_sel & (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank0_sel & (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_re <= vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_r = vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank0_sel & (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_re <= vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank0_sel & (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_r = vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank0_sel & (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_re <= vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank0_sel & (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_we <= (~vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_w = reset_storage[1:0];
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_w = scratch_storage[31:0];
assign vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_we;
assign vexriscv_gpiosoc_csr_bankarray_sel = (vexriscv_gpiosoc_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (vexriscv_gpiosoc_csr_bankarray_sel_r) begin
		vexriscv_gpiosoc_csr_bankarray_sram_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_dat_r;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_adr = vexriscv_gpiosoc_csr_bankarray_sram_bus_adr[5:0];
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_sel = (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_value_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_value_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_value_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_value_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_value_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_r = vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_re <= vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank1_sel & (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_w = timer_load_storage[31:0];
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_w = timer_reload_storage[31:0];
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_w = timer_en_storage;
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_w = timer_update_value_storage;
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_value_w = timer_value_status[31:0];
assign timer_value_we = vexriscv_gpiosoc_csr_bankarray_csrbank1_value_we;
assign timer_status_status = timer_zero0;
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_w = timer_status_status;
assign timer_status_we = vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_we;
assign timer_pending_status = timer_zero1;
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_w = timer_pending_status;
assign timer_pending_we = vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_w = timer_enable_storage;
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_sel = (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign uart_rxtx_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	uart_rxtx_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_r = vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_re <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_re <= vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_we <= 1'd0;
	if ((vexriscv_gpiosoc_csr_bankarray_csrbank2_sel & (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_we <= (~vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we);
	end
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_w = uart_txfull_status;
assign uart_txfull_we = vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_we;
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_w = uart_status_status[1:0];
assign uart_status_we = vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_w = uart_enable_storage[1:0];
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_w = uart_txempty_status;
assign uart_txempty_we = vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_we;
assign vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_we;
assign vexriscv_gpiosoc_csr_interconnect_adr = vexriscv_gpiosoc_vexriscv_gpiosoc_adr;
assign vexriscv_gpiosoc_csr_interconnect_we = vexriscv_gpiosoc_vexriscv_gpiosoc_we;
assign vexriscv_gpiosoc_csr_interconnect_dat_w = vexriscv_gpiosoc_vexriscv_gpiosoc_dat_w;
assign vexriscv_gpiosoc_vexriscv_gpiosoc_dat_r = vexriscv_gpiosoc_csr_interconnect_dat_r;
assign vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr = vexriscv_gpiosoc_csr_interconnect_adr;
assign vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr = vexriscv_gpiosoc_csr_interconnect_adr;
assign vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr = vexriscv_gpiosoc_csr_interconnect_adr;
assign vexriscv_gpiosoc_csr_bankarray_sram_bus_adr = vexriscv_gpiosoc_csr_interconnect_adr;
assign vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_we = vexriscv_gpiosoc_csr_interconnect_we;
assign vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_we = vexriscv_gpiosoc_csr_interconnect_we;
assign vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_we = vexriscv_gpiosoc_csr_interconnect_we;
assign vexriscv_gpiosoc_csr_bankarray_sram_bus_we = vexriscv_gpiosoc_csr_interconnect_we;
assign vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_w = vexriscv_gpiosoc_csr_interconnect_dat_w;
assign vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_w = vexriscv_gpiosoc_csr_interconnect_dat_w;
assign vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_w = vexriscv_gpiosoc_csr_interconnect_dat_w;
assign vexriscv_gpiosoc_csr_bankarray_sram_bus_dat_w = vexriscv_gpiosoc_csr_interconnect_dat_w;
assign vexriscv_gpiosoc_csr_interconnect_dat_r = (((vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_r | vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r) | vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r) | vexriscv_gpiosoc_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	array_muxed0 <= 30'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed0 <= ibus_adr;
		end
		default: begin
			array_muxed0 <= dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed1 <= ibus_dat_w;
		end
		default: begin
			array_muxed1 <= dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed2 <= ibus_sel;
		end
		default: begin
			array_muxed2 <= dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed3 <= ibus_cyc;
		end
		default: begin
			array_muxed3 <= dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed4 <= ibus_stb;
		end
		default: begin
			array_muxed4 <= dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed5 <= ibus_we;
		end
		default: begin
			array_muxed5 <= dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed6 <= ibus_cti;
		end
		default: begin
			array_muxed6 <= dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			array_muxed7 <= ibus_bte;
		end
		default: begin
			array_muxed7 <= dbus_bte;
		end
	endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
	subfragments_state <= subfragments_next_state;
	if (cmd_done_next_value_ce0) begin
		cmd_done <= cmd_done_next_value0;
	end
	if (data_done_next_value_ce1) begin
		data_done <= data_done_next_value1;
	end
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & ((~interface0_ram_bus_ack) | sram0_adr_burst))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & ((~interface1_ram_bus_ack) | sram1_adr_burst))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	vexriscv_gpiosoc_state <= vexriscv_gpiosoc_next_state;
	case (vexriscv_gpiosoc_grant)
		1'd0: begin
			if ((~vexriscv_gpiosoc_request[0])) begin
				if (vexriscv_gpiosoc_request[1]) begin
					vexriscv_gpiosoc_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~vexriscv_gpiosoc_request[1])) begin
				if (vexriscv_gpiosoc_request[0]) begin
					vexriscv_gpiosoc_grant <= 1'd0;
				end
			end
		end
	endcase
	vexriscv_gpiosoc_slave_sel_r <= vexriscv_gpiosoc_slave_sel;
	if (vexriscv_gpiosoc_wait) begin
		if ((~vexriscv_gpiosoc_done)) begin
			vexriscv_gpiosoc_count <= (vexriscv_gpiosoc_count - 1'd1);
		end
	end else begin
		vexriscv_gpiosoc_count <= 20'd1000000;
	end
	vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank0_sel) begin
		case (vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				vexriscv_gpiosoc_csr_bankarray_interface0_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_re) begin
		reset_storage[1:0] <= vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_r;
	end
	reset_re <= vexriscv_gpiosoc_csr_bankarray_csrbank0_reset0_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_re) begin
		scratch_storage[31:0] <= vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_r;
	end
	scratch_re <= vexriscv_gpiosoc_csr_bankarray_csrbank0_scratch0_re;
	bus_errors_re <= vexriscv_gpiosoc_csr_bankarray_csrbank0_bus_errors_re;
	vexriscv_gpiosoc_csr_bankarray_sel_r <= vexriscv_gpiosoc_csr_bankarray_sel;
	vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_sel) begin
		case (vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_w;
			end
			1'd1: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_w;
			end
			2'd2: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_w;
			end
			2'd3: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_w;
			end
			3'd4: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_value_w;
			end
			3'd5: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_w;
			end
			3'd6: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_w;
			end
			3'd7: begin
				vexriscv_gpiosoc_csr_bankarray_interface1_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_w;
			end
		endcase
	end
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_re) begin
		timer_load_storage[31:0] <= vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_r;
	end
	timer_load_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_load0_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_re) begin
		timer_reload_storage[31:0] <= vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_r;
	end
	timer_reload_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_reload0_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_re) begin
		timer_en_storage <= vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_r;
	end
	timer_en_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_en0_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_re) begin
		timer_update_value_storage <= vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_r;
	end
	timer_update_value_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_update_value0_re;
	timer_value_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_value_re;
	timer_status_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_status_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_re) begin
		timer_pending_r <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_r;
	end
	timer_pending_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_pending_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_re) begin
		timer_enable_storage <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_r;
	end
	timer_enable_re <= vexriscv_gpiosoc_csr_bankarray_csrbank1_ev_enable0_re;
	vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank2_sel) begin
		case (vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_w;
			end
			2'd2: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_w;
			end
			2'd3: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_w;
			end
			3'd4: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_w;
			end
			3'd5: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_w;
			end
			3'd6: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_w;
			end
			3'd7: begin
				vexriscv_gpiosoc_csr_bankarray_interface2_bank_bus_dat_r <= vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_txfull_re;
	uart_rxempty_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_rxempty_re;
	uart_status_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_status_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_re) begin
		uart_pending_r[1:0] <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_r;
	end
	uart_pending_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_pending_re;
	if (vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_re) begin
		uart_enable_storage[1:0] <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_r;
	end
	uart_enable_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_ev_enable0_re;
	uart_txempty_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_txempty_re;
	uart_rxfull_re <= vexriscv_gpiosoc_csr_bankarray_csrbank2_rxfull_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		cmd_done <= 1'd0;
		data_done <= 1'd0;
		subfragments_state <= 2'd0;
		vexriscv_gpiosoc_grant <= 1'd0;
		vexriscv_gpiosoc_slave_sel_r <= 5'd0;
		vexriscv_gpiosoc_count <= 20'd1000000;
		vexriscv_gpiosoc_csr_bankarray_sel_r <= 1'd0;
		vexriscv_gpiosoc_state <= 1'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 5314-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] mem[0:5313];
//initial begin
//	$readmemh("mem.init", mem);
//end
reg [31:0] mem_dat0;
always @(posedge sys_clk_1) begin
	mem_dat0 <= mem[adr];
end
assign dat_r = mem_dat0;


//------------------------------------------------------------------------------
// Memory mem_1: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_1[0:2047];
//initial begin
//	$readmemh("mem_1.init", mem_1);
//end
reg [10:0] mem_1_adr0;
always @(posedge sys_clk_1) begin
	if (sram0_we[0])
		mem_1[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		mem_1[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		mem_1[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		mem_1[sram0_adr][31:24] <= sram0_dat_w[31:24];
	mem_1_adr0 <= sram0_adr;
end
assign sram0_dat_r = mem_1[mem_1_adr0];


//------------------------------------------------------------------------------
// Memory mem_2: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_2[0:16383];
//initial begin
//	$readmemh("mem_2.init", mem_2);
//end
reg [13:0] mem_2_adr0;
always @(posedge sys_clk_1) begin
	if (sram1_we[0])
		mem_2[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		mem_2[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		mem_2[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		mem_2[sram1_adr][31:24] <= sram1_dat_w[31:24];
	mem_2_adr0 <= sram1_adr;
end
assign sram1_dat_r = mem_2[mem_2_adr0];


//------------------------------------------------------------------------------
// Memory mem_3: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem_3[0:36];
//initial begin
//	$readmemh("mem_3.init", mem_3);
//end
reg [5:0] mem_3_adr0;
always @(posedge sys_clk_1) begin
	mem_3_adr0 <= vexriscv_gpiosoc_csr_bankarray_adr;
end
assign vexriscv_gpiosoc_csr_bankarray_dat_r = mem_3[mem_3_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


AXI4LITE_GPIO AXI4LITE_GPIO(
	.ARADDR(gpio_axi_ar_payload_addr),
	.ARPROT(gpio_axi1),
	.ARVALID(gpio_axi_ar_valid),
	.AWADDR(gpio_axi_aw_payload_addr),
	.AWPROT(gpio_axi0),
	.AWVALID(gpio_axi_aw_valid),
	.BREADY(gpio_axi_b_ready),
	.CLK(sys_clk_1),
	.GPIN(gpio_axi_GPIN),
	.RREADY(gpio_axi_r_ready),
	.RSTN((~sys_rst)),
	.WDATA(gpio_axi_w_payload_data),
	.WSTRB(gpio_axi_w_payload_strb),
	.WVALID(gpio_axi_w_valid),
	.ARREADY(gpio_axi_ar_ready),
	.AWREADY(gpio_axi_aw_ready),
	.BRESP(gpio_axi_b_payload_resp),
	.BVALID(gpio_axi_b_valid),
	.GPOUT(gpio_axi_GPOUT),
	.INT(gpio_axi_INT),
	.RDATA(gpio_axi_r_payload_data),
	.RRESP(gpio_axi_r_payload_resp),
	.RVALID(gpio_axi_r_valid),
	.WREADY(gpio_axi_w_ready)
);

VexRiscv VexRiscv(
	.clk(sys_clk_1),
	.dBusWishbone_ACK(dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dat_r),
	.dBusWishbone_ERR(dbus_err),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_dat_r),
	.iBusWishbone_ERR(ibus_err),
	.reset((sys_rst | reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(dbus_adr),
	.dBusWishbone_BTE(dbus_bte),
	.dBusWishbone_CTI(dbus_cti),
	.dBusWishbone_CYC(dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dat_w),
	.dBusWishbone_SEL(dbus_sel),
	.dBusWishbone_STB(dbus_stb),
	.dBusWishbone_WE(dbus_we),
	.iBusWishbone_ADR(ibus_adr),
	.iBusWishbone_BTE(ibus_bte),
	.iBusWishbone_CTI(ibus_cti),
	.iBusWishbone_CYC(ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_dat_w),
	.iBusWishbone_SEL(ibus_sel),
	.iBusWishbone_STB(ibus_stb),
	.iBusWishbone_WE(ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-05-31 17:35:51.
//------------------------------------------------------------------------------
